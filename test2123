#!/usr/bin/env bash
set -euo pipefail

LOG_FILE="${LOG_FILE:-$HOME/ora_check.log}"
# Try common oratab locations
ORATAB_DEFAULTS=("/etc/oratab" "/var/opt/oracle/oratab")
ORATAB="${ORATAB:-}"
db_name="${PT_dbname:-}"

timestamp() { date '+%a %b %d %T %Y'; }

log() { echo "$(timestamp) | $*" | tee -a "$LOG_FILE"; }

# ---- Validate input ----
if [[ -z "${db_name}" ]]; then
  log "ERROR | PT_dbname is not set. Export it, e.g. 'export PT_dbname=ORCL'"
  exit 3
fi

# ---- Locate oratab ----
if [[ -z "${ORATAB}" ]]; then
  for p in "${ORATAB_DEFAULTS[@]}"; do
    if [[ -r "$p" ]]; then ORATAB="$p"; break; fi
  done
fi
if [[ -z "${ORATAB}" || ! -r "${ORATAB}" ]]; then
  log "WARN  | oratab not found/readable; continuing without ORACLE_HOME discovery."
fi

# ---- Discover ORACLE_HOME from oratab (optional) ----
# Note: oratab uses SIDs, not aliases. If PT_dbname is a TNS alias, this may not match.
ORACLE_HOME="${ORACLE_HOME:-}"
if [[ -r "${ORATAB:-/dev/null}" && -z "${ORACLE_HOME}" ]]; then
  # Exact SID match on first field, ignore comments/blank
  ORACLE_HOME="$(awk -F: -v sid="$db_name" '
    $0 !~ /^[[:space:]]*#/ && NF >= 2 && $1 == sid { print $2; exit }
  ' "$ORATAB" || true)"
fi
if [[ -n "${ORACLE_HOME}" && -d "${ORACLE_HOME}/bin" ]]; then
  export ORACLE_HOME
  export PATH="$ORACLE_HOME/bin:$PATH"
fi

# ---- Ensure tnsping exists ----
if ! command -v tnsping >/dev/null 2>&1; then
  log "ERROR | tnsping not found in PATH. Current PATH: $PATH"
  exit 4
fi

# ---- Optional: check local PMON (skip if you only care about network) ----
# Comment this block out if network-only is desired
if pgrep -f "ora_pmon_${db_name}" >/dev/null 2>&1; then
  log "INFO  | Local PMON for ${db_name} is running."
else
  log "INFO  | Local PMON for ${db_name} not found on $(hostname). Continuing with tnsping (network check)."
fi

# ---- Run tnsping ----
log "INFO  | Running tnsping for ${db_name}..."
tns_out="$(tnsping "$db_name" 2>&1 || true)"
rc=$?
echo "$tns_out" | tee -a "$LOG_FILE"

if [[ $rc -ne 0 ]]; then
  log "ERROR | tnsping exited with rc=$rc for ${db_name}"
  exit 5
fi
log "INFO  | tnsping succeeded for ${db_name} (rc=0)"

# ---- Extract PORT robustly ----
# 1) Try descriptor PORT=NNNN anywhere
port_value="$(
  echo "$tns_out" \
    | grep -Eo 'PORT[[:space:]]*=[[:space:]]*[0-9]+' \
    | grep -Eo '[0-9]+' \
    | head -1
)"

# 2) If still empty, handle EZCONNECT like host:1521/service
if [[ -z "$port_value" ]]; then
  port_value="$(
    echo "$tns_out" \
      | grep -Eo '[A-Za-z0-9._-]+:[0-9]{2,5}(/[A-Za-z0-9._-]+)?' \
      | head -1 \
      | awk -F: '{print $2}' \
      | grep -Eo '^[0-9]+'
  )"
fi

if [[ -z "$port_value" ]]; then
  log "ERROR | Could not extract PORT from tnsping output."
  # Optional: dump a hint about TNS_ADMIN and parameter files
  echo "$tns_out" | grep -E 'Used|Attempting' -n | tee -a "$LOG_FILE" || true
  exit 6
fi

if [[ "$port_value" == "1521" ]]; then
  log "STATUS| FAIL | Port is default ($port_value)"
  exit 1
else
  log "STATUS| PASS | Port is $port_value (non-default)"
  exit 0
fi
